Name: Workflow_7683
Compute:
  Type: EC2
  Fleet: Linux.x86-64.Large
SchemaVersion: "1.0"

# Optional - Set automatic triggers.
Triggers:
  - Type: PULLREQUEST
    Events:
      - REVISION

Actions:
  BuildDocker:
    # Identifies the action. Do not modify this value.
    Identifier: aws/build@v1.0.0
    Outputs:
      # Optional; Automatically discover reports for popular test frameworks
      AutoDiscoverReports:
        Enabled: true
        # Use as prefix for the report files
        ReportNamePrefix: rpt
      Variables:
        - IMAGE
    # Defines the action's properties.
    Configuration:
      # Required - Steps are sequential instructions that run shell commands
      Steps:
        - Run: echo Logging in to ECR
        - Run: aws ecr get-login-password --region $BUILD_AWS_REGION | docker login
            --username AWS --password-stdin
            $AWS_ACCOUNT_ID.dkr.ecr.$BUILD_AWS_REGION.amazonaws.com
        - Run: echo Docker Pulling Image ...
        - Run: docker pull
            $AWS_ACCOUNT_ID.dkr.ecr.$BUILD_AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
            || true
        #  - Run: echo installing npm ...
        #  - Run: npm install
        #  - Run: echo Navigating to node-backend directory ...
        #  - Run: cd node-backend
        #  - Run: echo installing npm ...
        #  - Run: npm install
        #  - Run: echo Navigating to react-frontend directory ...
        #  - Run: cd ../react-frontend
        #  - Run: echo installing npm ...
        #  - Run: npm install
        #  - Run: cd ../react-frontend
        #  - Run: echo running npm run build ...
        #  - Run: npm run build
        #  - Run: cd ../
        #    - Run: echo Building and Pushing Docker Image ...
        - Run: echo Building Docker Image ...
        - Run: docker build --cache-from
            $AWS_ACCOUNT_ID.dkr.ecr.$BUILD_AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
            --tag
            $AWS_ACCOUNT_ID.dkr.ecr.$BUILD_AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
            .
        - Run: docker push
            $AWS_ACCOUNT_ID.dkr.ecr.$BUILD_AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
        - Run: echo Describing Task Definition ...
        # - Run: aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --region $BUILD_AWS_REGION
        #    - Run: aws ecs describe-task-definition --task-definition Receipts-task1-Deploy--query taskDefinition > task-definition.json
        - Run: echo Updating Task Definition ...
        - Run: cat $ECS_TASK_DEFINITION > task-definition.json
        - Run: echo Exporting Docker Image to next Action Step ...
        - Run: export
            IMAGE=$AWS_ACCOUNT_ID.dkr.ecr.$BUILD_AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
        - Run: echo DONE BUILD YAAAY!! ...
      Container:
        Registry: CODECATALYST
        Image: CodeCatalystLinux_x86_64:2024_03
    Environment:
      Connections:
        - Role: CodeCatalystDevRole
          Name: "692889134364"
      Name: test
    Inputs:
      Sources:
        - WorkflowSource
      Variables:
        - Name: BUILD_AWS_REGION
          Value: me-south-1
        - Name: DEPLOY_AWS_REGION
          Value: me-south-1
        - Name: ECR_REPOSITORY
          Value: receipts-ecr-repo
        - Name: IMAGE_TAG
          Value: "0.5"
        - Name: ECS_SERVICE
          Value: Receipts-Cluster-Service2-Deployment
        - Name: ECS_CLUSTER
          Value: ReceiptsCluster
        - Name: ECS_TASK_DEFINITION
          Value: Receipts-task1-Deploy.json
        - Name: CONTAINER_NAME
          Value: Receipts-task1-Deploy
        - Name: AWS_ACCOUNT_ID
          Value: "692889134364"
          #       $AWS_ACCOUNT_ID.dkr.ecr.$BUILD_AWS_REGION.amazonaws.com/$ECR_REPOSITORY:${WorkflowSource.CommitId}
          #   - Run: aws ecs describe-task-definition --task-definition Receipts-task1-Deploy --query taskDefinition
  RenderAmazonECSTaskDefinition_5c:
    # Identifies the action. Do not modify this value.
    Identifier: aws/ecs-render-task-definition@v1.0.4
    # Defines the action's properties.
    Configuration:
      image: ${BuildDocker.IMAGE}
      container-name: ${CONTAINER_NAME}
      task-definition: ${ECS_TASK_DEFINITION}
    Outputs:
      Artifacts:
        - Name: TaskDefArtifact
          Files:
            - task-definition*
    DependsOn:
      - BuildDocker
    # Specifies the source and/or artifacts to pass to the action as input.
    Inputs:
      Sources: []

  DeployToAmazonECS_4c:
    Identifier: aws/ecs-deploy@v1.0.5 # Defines the action's properties.
    Configuration:
      force-new-deployment: "1"
      task-definition: task-definition
      service: ${ECS_SERVICE}
      cluster: arn:aws:ecs:${DEPLOY_AWS_REGION}:${AWS_ACCOUNT_ID}:cluster/${ECS_CLUSTER}
      region: ${DEPLOY_AWS_REGION}
    # Required; You can use an environment, AWS account connection, and role to access AWS resources.
    Environment:
      Connections:
        - Role: CodeCatalystDevRole
          Name: "692889134364"
      Name: test
    DependsOn:
      - RenderAmazonECSTaskDefinition_5c
    # Specifies the source and/or artifacts to pass to the action as input.
    Inputs:
      Artifacts:
        - TaskDefArtifact
      Sources: []
