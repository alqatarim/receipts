Name: Workflow_7683
SchemaVersion: "1.0"

# Optional - Set automatic triggers.
Triggers:
  - Type: PUSH
    Branches:
      - main
Actions:
  BuildDocker:
    # Identifies the action. Do not modify this value.
    Identifier: aws/build@v1.0.0
    Outputs:
      # Optional; Automatically discover reports for popular test frameworks
      AutoDiscoverReports:
        Enabled: true
        # Use as prefix for the report files
        ReportNamePrefix: rpt
      Artifacts:
        - Name: SourceGithub
          Files:
            - "**/*"
    # Defines the action's properties.
    Configuration:
      # Required - Steps are sequential instructions that run shell commands
      Steps:
        - Run: echo installing npm ...
        - Run: npm install
        - Run: echo Navigating to node-backend directory ...
        - Run: cd node-backend
        - Run: echo installing npm ...
        - Run: npm install
        - Run: echo Navigating to react-frontend directory ...
        - Run: cd ../react-frontend
        - Run: echo installing npm ...
        - Run: npm install
        - Run: cd ../react-frontend
        - Run: echo running npm run build ...
        - Run: npm run build
        - Run: cd ../
        - Run: echo Logging in to Docker...
        - Run: aws ecr get-login-password --region me-south-1 | docker login --username
            AWS --password-stdin 692889134364.dkr.ecr.me-south-1.amazonaws.com
        - Run: echo Building Docker Image ...
        #   - Run: docker build -t receipts:${WorkflowSource.CommitId} .
        - Run: docker build -t receipts-ecr-repo:0.2 -f Dockerfile .
        # - Run: docker build -t $REPOSITORY_URI:latest .
        - Run: echo Docker Tagging Images ...
        - Run: docker tag receipts-ecr-repo:0.2
            692889134364.dkr.ecr.me-south-1.amazonaws.com/receipts-ecr-repo:0.2
        #    - Run: docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
        - Run: echo Docker pushing Image ...
        - Run: docker push
            692889134364.dkr.ecr.me-south-1.amazonaws.com/receipts-ecr-repo:0.2
        #    - Run: docker push $REPOSITORY_URI:latest
        #  - Run: docker push $REPOSITORY_URI:$IMAGE_TAG
        - Run: echo DONE BUILD YAAAY!! ...
      Container:
        Registry: CODECATALYST
        Image: CodeCatalystLinux_x86_64:2024_03
    Compute:
      Type: EC2
      Fleet: Linux.x86-64.Large
    Environment:
      Connections:
        - Role: CodeCatalystDevRole
          Name: "692889134364"
      Name: test
    Inputs:
      Sources:
        - WorkflowSource

  RenderAmazonECSTaskDefinition_5c:
    # Identifies the action. Do not modify this value.
    Identifier: aws/ecs-render-task-definition@v1.0.4
    # Defines the action's properties.
    Configuration:
      image: 692889134364.dkr.ecr.me-south-1.amazonaws.com/receipts-ecr-repo:0.2
      container-name: Receipts-Container1-Deploy
      task-definition: taskdef.json
    Compute:
      Type: EC2
      Fleet: Linux.x86-64.Large
    Outputs:
      Artifacts:
        - Name: TaskDefArtifact
          Files:
            - task-definition*
    DependsOn:
      - BuildDocker
    # Specifies the source and/or artifacts to pass to the action as input.
    Inputs:
      Sources: []
  DeployToAmazonECS_4c:
    Identifier: aws/ecs-deploy@v1.0.5 # Defines the action's properties.
    Configuration:
      force-new-deployment: "1"
      task-definition: newTaskDefenition
      service: Receipts-US-East-Cluster-Service1
      cluster: Receipts-US-East-1-Cluster
      region: us-east-1
    # Required; You can use an environment, AWS account connection, and role to access AWS resources.
    Environment:
      Connections:
        - Role: CodeCatalystDevRole
          Name: "692889134364"
      Name: test
    DependsOn:
      - RenderAmazonECSTaskDefinition_5c
    # Specifies the source and/or artifacts to pass to the action as input.
    Inputs:
      Artifacts:
        - TaskDefArtifact
      Sources: []
