Name: Workflow_7683
Compute:
  Type: EC2
  Fleet: ReceiptsProvisionedFleet
SchemaVersion: "1.0"

# Optional - Set automatic triggers.
Triggers:
  - Type: PULLREQUEST
    Events:
      - REVISION
    Branches:
      - 20th-branch\/.*

Actions:
  BuildDocker:
    # Identifies the action. Do not modify this value.
    Identifier: aws/build@v1.0.0
    Outputs:
      # Optional; Automatically discover reports for popular test frameworks
      AutoDiscoverReports:
        Enabled: true
        # Use as prefix for the report files
        ReportNamePrefix: rpt
      Artifacts:
        - Name: SourceGithub
          Files:
            - "**/*"
      Variables:
        - IMAGE
    # Defines the action's properties.
    Configuration:
      # Required - Steps are sequential instructions that run shell commands
      Steps:
        - Run: echo installing npm ...
        - Run: npm install
        - Run: echo Navigating to node-backend directory ...
        - Run: cd node-backend
        - Run: echo installing npm ...
        - Run: npm install
        - Run: echo Navigating to react-frontend directory ...
        - Run: cd ../react-frontend
        - Run: echo installing npm ...
        - Run: npm install
        - Run: cd ../react-frontend
        - Run: echo running npm run build ...
        - Run: npm run build
        - Run: cd ../
        - Run: echo Logging in to ECR
        - Run: aws ecr get-login-password --region $BUILD_AWS_REGION | docker login
            --username AWS --password-stdin
            $AWS_ACCOUNT_ID.dkr.ecr.$BUILD_AWS_REGION.amazonaws.com
        # Create a new builder instance with the docker-container driver
    #    - Run: echo Creating Mybuilder Docker Container ...
    #    - Run: docker buildx create --use --driver docker-container --name mybuilder
    #    - Run: echo Building and Pushing Docker Image ...
        - Run: echo Building Docker Image ...
        - Run: docker build . --cache-from /path/to/docker/cache --build-arg BUILD_VERSION=${WorkflowSource.BUILD_VERSION} -t $ECR_REPOSITORY:${WorkflowSource.CommitId}
        - Run: docker save -o /path/to/docker/cache/image.tar $ECR_REPOSITORY:${WorkflowSource.CommitId}
        
        - Run: echo Docker pushing Image ...
        - Run: docker push $AWS_ACCOUNT_ID.dkr.ecr.$BUILD_AWS_REGION.amazonaws.com/$ECR_REPOSITORY:${WorkflowSource.CommitId}
        
        
        
        
        #   - Run: docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
     #   - Run: docker buildx build --push -t $AWS_ACCOUNT_ID.dkr.ecr.$BUILD_AWS_REGION.amazonaws.com/$ECR_REPOSITORY:${WorkflowSource.CommitId}
     #       --cache-to
     #       mode=max,image-manifest=true,oci-mediatypes=true,type=registry,ref=$AWS_ACCOUNT_ID.dkr.ecr.$BUILD_AWS_REGION.amazonaws.com/$ECR_REPOSITORY:cache
   #         --cache-from
      #      type=registry,ref=$AWS_ACCOUNT_ID.dkr.ecr.$BUILD_AWS_REGION.amazonaws.com/$ECR_REPOSITORY:cache
       #     .
        #       $AWS_ACCOUNT_ID.dkr.ecr.$BUILD_AWS_REGION.amazonaws.com/$ECR_REPOSITORY:${WorkflowSource.CommitId}

        - Run: echo Describing Task Definition ...
        - Run: aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION
            --region $BUILD_AWS_REGION
        #    - Run: aws ecs describe-task-definition --task-definition Receipts-task1-Deploy--query taskDefinition > task-definition.json
        - Run: echo Updating Task Definition ...
        - Run: cat $ECS_TASK_DEFINITION.json > task-definition.json
        - Run: echo Exporting Docker Image to next Action Step ...
        - Run: export
            IMAGE=$AWS_ACCOUNT_ID.dkr.ecr.$BUILD_AWS_REGION.amazonaws.com/$ECR_REPOSITORY:${WorkflowSource.CommitId}
        - Run: echo DONE BUILD YAAAY!! ...
      Container:
        Registry: CODECATALYST
        Image: CodeCatalystLinux_x86_64:2024_03
    Environment:
      Connections:
        - Role: CodeCatalystDevRole
          Name: "692889134364"
      Name: test
    Inputs:
      Sources:
        - WorkflowSource
      Variables:
        - Name: BUILD_AWS_REGION
          Value: me-south-1
        - Name: DEPLOY_AWS_REGION
          Value: me-south-1
        - Name: ECR_REPOSITORY
          Value: receipts-ecr-repo
        - Name: IMAGE_TAG
          Value: "0.5"
        - Name: ECS_SERVICE
          Value: Receipts-Cluster-Service2-Deployment
        - Name: ECS_CLUSTER
          Value: ReceiptsCluster
        - Name: ECS_TASK_DEFINITION
          Value: Receipts-task1-Deploy
        - Name: CONTAINER_NAME
          Value: Receipts-task1-Deploy
        - Name: AWS_ACCOUNT_ID
          Value: "692889134364"
    Caching:
      FileCaching:
        DockerLayersCache:
          Path: /path/to/docker/cache/


          #   - Run: aws ecs describe-task-definition --task-definition Receipts-task1-Deploy --query taskDefinition
  RenderAmazonECSTaskDefinition_5c:
    # Identifies the action. Do not modify this value.
    Identifier: aws/ecs-render-task-definition@v1.0.4
    # Defines the action's properties.
    Configuration:
      image: ${BuildDocker.IMAGE}
      container-name: ${CONTAINER_NAME}
      task-definition: task-definition.json
    Outputs:
      Artifacts:
        - Name: TaskDefArtifact
          Files:
            - task-definition*
    DependsOn:
      - BuildDocker
    # Specifies the source and/or artifacts to pass to the action as input.
    Inputs:
      Sources: []

  DeployToAmazonECS_4c:
    Identifier: aws/ecs-deploy@v1.0.5 # Defines the action's properties.
    Configuration:
      force-new-deployment: "1"
      task-definition: task-definition
      service: ${ECS_SERVICE}
      cluster: arn:aws:ecs:${DEPLOY_AWS_REGION}:${AWS_ACCOUNT_ID}:cluster/${ECS_CLUSTER}
      region: ${DEPLOY_AWS_REGION}
    # Required; You can use an environment, AWS account connection, and role to access AWS resources.
    Environment:
      Connections:
        - Role: CodeCatalystDevRole
          Name: "692889134364"
      Name: test
    DependsOn:
      - RenderAmazonECSTaskDefinition_5c
    # Specifies the source and/or artifacts to pass to the action as input.
    Inputs:
      Artifacts:
        - TaskDefArtifact
      Sources: []
